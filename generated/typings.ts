/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  LinkArg: { // input type
    field: string; // String!
    list?: boolean | null; // Boolean
  }
  ReferenceArg: { // input type
    field: string; // String!
    list?: boolean | null; // Boolean
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Entity: { // root type
    id: string; // String!
  }
  EntityLink: { // root type
    id: string; // String!
  }
  EntityReference: { // root type
    id: string; // String!
  }
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  LinkArg: NexusGenInputs['LinkArg'];
  ReferenceArg: NexusGenInputs['ReferenceArg'];
}

export interface NexusGenFieldTypes {
  Entity: { // field return type
    EntityLink: NexusGenRootTypes['EntityLink'] | null; // EntityLink
    EntityReference: NexusGenRootTypes['EntityReference'] | null; // EntityReference
    id: string; // String!
  }
  EntityLink: { // field return type
    EntityLink: NexusGenRootTypes['EntityLink']; // EntityLink!
    EntityReference: NexusGenRootTypes['EntityReference'][]; // [EntityReference!]!
    id: string; // String!
  }
  EntityReference: { // field return type
    EntityReference: NexusGenRootTypes['EntityReference']; // EntityReference!
    id: string; // String!
  }
  Query: { // field return type
    Entity: NexusGenRootTypes['Entity'][]; // [Entity!]!
  }
}

export interface NexusGenArgTypes {
  Entity: {
    EntityLink: { // args
      database?: string | null; // String
      ids?: string[] | null; // [String!]
      link: NexusGenInputs['LinkArg']; // LinkArg!
      name: string; // String!
    }
    EntityReference: { // args
      database?: string | null; // String
      ids?: string[] | null; // [String!]
      name: string; // String!
      ref: NexusGenInputs['ReferenceArg']; // ReferenceArg!
    }
  }
  EntityLink: {
    EntityLink: { // args
      database?: string | null; // String
      ids?: string[] | null; // [String!]
      link: NexusGenInputs['LinkArg']; // LinkArg!
      name: string; // String!
    }
    EntityReference: { // args
      database?: string | null; // String
      ids?: string[] | null; // [String!]
      name: string; // String!
      ref: NexusGenInputs['ReferenceArg']; // ReferenceArg!
    }
  }
  EntityReference: {
    EntityReference: { // args
      database?: string | null; // String
      ids?: string[] | null; // [String!]
      name: string; // String!
      ref: NexusGenInputs['ReferenceArg']; // ReferenceArg!
    }
  }
  Query: {
    Entity: { // args
      database?: string | null; // String
      ids?: string[] | null; // [String!]
      name: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Entity" | "EntityLink" | "EntityReference" | "Query";

export type NexusGenInputNames = "LinkArg" | "ReferenceArg";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}